<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ES6:JavaScript箭头函数的this指向与穿透问题</title>
    <link href="/2022/10/01/page/"/>
    <url>/2022/10/01/page/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>以一个例子引出：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> person =&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;郭德纲&quot;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">hobbies</span>:[<span class="hljs-string">&quot;写代码&quot;</span>,<span class="hljs-string">&quot;说相声&quot;</span>,<span class="hljs-string">&quot;烫头&quot;</span>],</span><br><span class="language-javascript">    <span class="hljs-attr">printHobbies</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">hobbies</span>.<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>+<span class="hljs-string">&quot;喜欢&quot;</span>+res)</span><br><span class="language-javascript">      &#125;)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">  person.<span class="hljs-title function_">printHobbies</span>()</span><br><span class="language-javascript">  <span class="hljs-comment">//输出: 喜欢写代码</span></span><br><span class="language-javascript">          喜欢说相声</span><br><span class="language-javascript">          喜欢烫头</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>打印中“郭德纲”没有出现，原因出在<code>function(res)&#123;console.log(this.name+&quot;喜欢&quot;+res)&#125;</code>这个回调函数上，这个匿名的回调函数没有绑定调用者（ES5中函数内this指向调用者），其内部的this无从指向，只能遵循匿名函数this指向windows这个规则去指向windows，而windows的name=’’</p><h3 id="1、ES5解决回调函数this指向的方法：用that-this"><a href="#1、ES5解决回调函数this指向的方法：用that-this" class="headerlink" title="1、ES5解决回调函数this指向的方法：用that=this"></a>1、ES5解决回调函数this指向的方法：用that=this</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> person =&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;郭德纲&quot;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">hobbies</span>:[<span class="hljs-string">&quot;写代码&quot;</span>,<span class="hljs-string">&quot;说相声&quot;</span>,<span class="hljs-string">&quot;烫头&quot;</span>],</span><br><span class="language-javascript">    <span class="hljs-attr">printHobbies</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> that = <span class="hljs-variable language_">this</span></span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">hobbies</span>.<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(that.<span class="hljs-property">name</span>+<span class="hljs-string">&quot;喜欢&quot;</span>+res)</span><br><span class="language-javascript">      &#125;)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">  person.<span class="hljs-title function_">printHobbies</span>()</span><br><span class="language-javascript">  <span class="hljs-comment">//输出: 郭德纲喜欢写代码</span></span><br><span class="language-javascript">          郭德纲喜欢说相声</span><br><span class="language-javascript">          郭德纲喜欢烫头</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>此方法在回调函数以外将指向对象的this存在that中，再通过<code>that.name</code>调用对象的name</p><h3 id="2、JavaScript箭头函数的this指向与穿透"><a href="#2、JavaScript箭头函数的this指向与穿透" class="headerlink" title="2、JavaScript箭头函数的this指向与穿透"></a>2、JavaScript箭头函数的this指向与穿透</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> person =&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;郭德纲&quot;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">hobbies</span>:[<span class="hljs-string">&quot;写代码&quot;</span>,<span class="hljs-string">&quot;说相声&quot;</span>,<span class="hljs-string">&quot;烫头&quot;</span>],</span><br><span class="language-javascript">    <span class="hljs-attr">printHobbies</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">hobbies</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>+<span class="hljs-string">&quot;喜欢&quot;</span>+res)</span><br><span class="language-javascript">      &#125;)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">  person.<span class="hljs-title function_">printHobbies</span>()</span><br><span class="language-javascript">  <span class="hljs-comment">//输出: 郭德纲喜欢写代码</span></span><br><span class="language-javascript">          郭德纲喜欢说相声</span><br><span class="language-javascript">          郭德纲喜欢烫头</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>由于箭头函数的this指向是词法作用域，可以穿透至它的父级作用域，所以它的this指向和父级作用域的this指向一样</p><p><strong>词法作用域关注函数在何处声明，而动态作用域关注函数从何处调用</strong><br><strong>词法作用域是在写代码或者定义时确定的，而动态作用域是在运行时确定的（this也是！）</strong></p><h3 id="3、箭头函数不适用的场景"><a href="#3、箭头函数不适用的场景" class="headerlink" title="3、箭头函数不适用的场景"></a>3、箭头函数不适用的场景</h3><p>1、构造函数不能使用箭头函数，因为构造函数需要绑定到对象身上<br>2、需要绑定到当前对象触发dom事件的时候<br>3、需要使用arguments，arguments可以接收函数的参数，箭头函数内没有arguments这个类数组的，需要再最外加一个(…arg)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">sum</span> =(<span class="hljs-params">...arg</span>)=&gt;&#123;</span><br><span class="language-javascript">  <span class="hljs-keyword">return</span> arg.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">preSum,val</span>)=&gt;</span></span><br><span class="language-javascript">  preSum + val,<span class="hljs-number">0</span>)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Git的常见用法</title>
    <link href="/2022/09/24/page/"/>
    <url>/2022/09/24/page/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="1-git-init-初始化git生成git仓库"><a href="#1-git-init-初始化git生成git仓库" class="headerlink" title="1.git init 初始化git生成git仓库"></a>1.git init 初始化git生成git仓库</h3><p>生成.git文件记录所有变更行为</p><h3 id="2-git-add-60-filename-62-添文件到暂存区"><a href="#2-git-add-60-filename-62-添文件到暂存区" class="headerlink" title="2.git add &#60;filename&#62; 添文件到暂存区"></a>2.git add &#60;filename&#62; 添文件到暂存区</h3><p>git add .加入所有文件到暂存区</p><h3 id="3-git-commit-m-‘message’提交文件到本地仓库"><a href="#3-git-commit-m-‘message’提交文件到本地仓库" class="headerlink" title="3.git commit -m ‘message’提交文件到本地仓库"></a>3.git commit -m ‘message’提交文件到本地仓库</h3><p>git commit规范:</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">feat:</span> 新功能<br><span class="hljs-symbol">fix:</span> 修改bug<br><span class="hljs-symbol">docs:</span> 修改文档<br><span class="hljs-symbol">style:</span> 格式化代码结构（不影响代码运行的变动)<br><span class="hljs-symbol">perf:</span> 性能优化<br><span class="hljs-symbol">refactor:</span> 重构（即不是新增功能，也不是修改bug的代码变动，比如重命名变量）<br><span class="hljs-symbol">chore:</span> 构建过程或辅助工具的变动（不会影响代码运行）<br><span class="hljs-symbol">revert:</span> 回滚到上一个版本。<br><span class="hljs-symbol">test:</span> 增加测试。<br><span class="hljs-symbol">merge:</span> 代码合并。<br></code></pre></td></tr></table></figure><h3 id="4-git-reset-回退版本"><a href="#4-git-reset-回退版本" class="headerlink" title="4.git reset 回退版本"></a>4.git reset 回退版本</h3><h4 id="4-1-git-reset-60-filename-62-将commit后unmodified的文件变更为modified"><a href="#4-1-git-reset-60-filename-62-将commit后unmodified的文件变更为modified" class="headerlink" title="4.1.git reset &#60;filename&#62; 将commit后unmodified的文件变更为modified"></a>4.1.git reset &#60;filename&#62; 将commit后unmodified的文件变更为modified</h4><h4 id="4-2-git-reset-60-commitID-62-回到此comiitID提交时的状态"><a href="#4-2-git-reset-60-commitID-62-回到此comiitID提交时的状态" class="headerlink" title="4.2.git reset &#60;commitID&#62; 回到此comiitID提交时的状态"></a>4.2.git reset &#60;commitID&#62; 回到此comiitID提交时的状态</h4><p>git reset的三种模式 <strong>–mixed</strong> 、**–soft<strong>、</strong>–hard**<br>在本地，git会分三个区：工作区、暂存区、本地库</p><p>–mixed：保留变更且变更内容处于modified</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript">git reset <span class="hljs-comment">--mixed xxx</span><br><span class="hljs-comment">#移动本地库HEAD指针</span><br><span class="hljs-comment">#重置暂存区</span><br><span class="hljs-comment">#不仅移动了本地库的指针，同时还把暂存区的代码也做了移动。也就是说你上次添加到暂存区的代码，现在变成了红色，即未做【add】操作。如果不写--mixed，默认也是此参数</span><br></code></pre></td></tr></table></figure><p>–soft：保留变更且变更内容处于staged</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">git reset <span class="hljs-comment">--soft xxx</span><br><span class="hljs-comment">#仅仅移动本地库HEAD指针</span><br><span class="hljs-comment">#仅仅移动本地库HEAD指针，而暂存区和你本地的代码是没有做任何改变的。但是这个时候你上次提交到本地库的代码状态是绿色的，即你未做【commit】操作</span><br></code></pre></td></tr></table></figure><p>–hard：不保留所有变更</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs applescript">git reset <span class="hljs-comment">--hard xxx</span><br><span class="hljs-comment">#移动本地库HEAD指针</span><br><span class="hljs-comment">#重置暂存区</span><br><span class="hljs-comment">#重置工作区</span><br><span class="hljs-comment">#不仅移动了本地库的指针，同时还把暂存区的代码也做了移动，同时你本地的代码就是你回退的版本代码</span><br><br></code></pre></td></tr></table></figure><h3 id="5-git-branch-分支"><a href="#5-git-branch-分支" class="headerlink" title="5.git branch 分支"></a>5.git branch 分支</h3><h4 id="5-1-git-checkout-b-60-新分支-62-60-模板分支-62-以模板分支为模板，切一个新分支"><a href="#5-1-git-checkout-b-60-新分支-62-60-模板分支-62-以模板分支为模板，切一个新分支" class="headerlink" title="5.1.git checkout -b &#60;新分支&#62;&#60;模板分支&#62; 以模板分支为模板，切一个新分支"></a>5.1.git checkout -b &#60;新分支&#62;&#60;模板分支&#62; 以模板分支为模板，切一个新分支</h4><p>如果模板不填，则以当前分支为模板</p><h4 id="5-2-git-checkout-b-60-新分支-62-origin-60-模板分支-62-以origin远端仓库模板分支为模板，切一个新分支"><a href="#5-2-git-checkout-b-60-新分支-62-origin-60-模板分支-62-以origin远端仓库模板分支为模板，切一个新分支" class="headerlink" title="5.2.git checkout -b &#60;新分支&#62; origin &#60;模板分支&#62; 以origin远端仓库模板分支为模板，切一个新分支"></a>5.2.git checkout -b &#60;新分支&#62; origin &#60;模板分支&#62; 以origin远端仓库模板分支为模板，切一个新分支</h4><h4 id="5-3-git-branch-查看我们当前所处的分支"><a href="#5-3-git-branch-查看我们当前所处的分支" class="headerlink" title="5.3.git branch 查看我们当前所处的分支"></a>5.3.git branch 查看我们当前所处的分支</h4><h4 id="5-4-git-branch-60-branchName-62-切换分支"><a href="#5-4-git-branch-60-branchName-62-切换分支" class="headerlink" title="5.4.git branch &#60;branchName&#62; 切换分支"></a>5.4.git branch &#60;branchName&#62; 切换分支</h4><h3 id="git-merge-60-branchName-62-合并分支变更"><a href="#git-merge-60-branchName-62-合并分支变更" class="headerlink" title="git merge &#60;branchName&#62; 合并分支变更"></a>git merge &#60;branchName&#62; 合并分支变更</h3><p>注意是是合并变更不是内容</p><h3 id="6-git远程仓库"><a href="#6-git远程仓库" class="headerlink" title="6.git远程仓库"></a>6.git远程仓库</h3><h4 id="6-1-git-push-set-upstream-origin-60-branchName-62-将远端origin分支作为本地分支的上流分支"><a href="#6-1-git-push-set-upstream-origin-60-branchName-62-将远端origin分支作为本地分支的上流分支" class="headerlink" title="6.1.git push -set-upstream origin &#60;branchName&#62; 将远端origin分支作为本地分支的上流分支"></a>6.1.git push -set-upstream origin &#60;branchName&#62; 将远端origin分支作为本地分支的上流分支</h4><p>如果我们的本地分支是新切的，即没有设置上流分支，得先执行<code>git push -set-upstream origin &amp;#60;branchName&amp;#62;</code>设置上流分支，执行后远程仓库会新建一个&#60;branchName&#62;分支，git push（git push -u origin branch）就可以顺利将本地变更推送至远端</p><h4 id="6-2-git-fetch-拉取远端仓库信息：获知远程仓库的分支"><a href="#6-2-git-fetch-拉取远端仓库信息：获知远程仓库的分支" class="headerlink" title="6.2.git fetch 拉取远端仓库信息：获知远程仓库的分支"></a>6.2.git fetch 拉取远端仓库信息：获知远程仓库的分支</h4><p>如果是fetch下来的分支，自己再git checkout创建相应分支，可以不用设置上流分支-set-upstream来连接远端</p><h3 id="7-git-pull-相当于先fetch再自动merge"><a href="#7-git-pull-相当于先fetch再自动merge" class="headerlink" title="7.git pull 相当于先fetch再自动merge"></a>7.git pull 相当于先fetch再自动merge</h3><p>当自己fetch的远端分支被修改后，想将变更代码再次fetch到本地再merge合并，可以用git pull快速实现</p><h3 id="8-git-log-status-reflog-查看日志-状态-操作记录"><a href="#8-git-log-status-reflog-查看日志-状态-操作记录" class="headerlink" title="8.git log/status/reflog 查看日志/状态/操作记录"></a>8.git log/status/reflog 查看日志/状态/操作记录</h3><h4 id="8-1-git-log-查看git日志"><a href="#8-1-git-log-查看git日志" class="headerlink" title="8.1.git log 查看git日志"></a>8.1.git log 查看git日志</h4><p>可以看见什么人在什么时间提交了一个什么样的commit，还能查看到每一个commit生成的属于自己的唯一哈希值，可以理解为commit的身份证</p><h4 id="8-2-git-status-查看git状态"><a href="#8-2-git-status-查看git状态" class="headerlink" title="8.2.git status 查看git状态"></a>8.2.git status 查看git状态</h4><p>红色字体代表有更新，再通过add后，可变绿</p><h4 id="8-3-git-reflog-查看所有的操作记录"><a href="#8-3-git-reflog-查看所有的操作记录" class="headerlink" title="8.3.git reflog 查看所有的操作记录"></a>8.3.git reflog 查看所有的操作记录</h4><p>方便查看commitID的哈希值，虽然只有前7位但已经保证唯一性，想要回到当前分支有更快的方法那就是git pull</p><h3 id="9-文件状态-Untracked-Unmodified-Modified-Staged"><a href="#9-文件状态-Untracked-Unmodified-Modified-Staged" class="headerlink" title="9.文件状态 Untracked Unmodified Modified Staged"></a>9.文件状态 Untracked Unmodified Modified Staged</h3><p>Untracked未追踪的 Unmodified未修改的 Modified修改过的 Staged暂存状态</p><p>1.没有被add过的文件叫untracked<br>2.add之后文件处于staged状态等待commit<br>3.commit之后文件处于unmodified<br>4.当unmodified的文件被修改则会变为modified状态<br>(但commit想要成功，此文件必须是staged的状态，所以更改过的文件需要重新add，使之从modified状态变更为staged)<br>5.modified之后的文件add之后将继续变为staged状态<br>6.unmodifed的文件如果不再需要了，可以remove它不再追踪，使之变为untracked状态</p><p><img src="/img/article/gitstatue.jpg" alt="git的4种文件状态"></p><h3 id="10-git-alias-设置命令别名"><a href="#10-git-alias-设置命令别名" class="headerlink" title="10.git alias 设置命令别名"></a>10.git alias 设置命令别名</h3><p>找到git的etc安装目录，打开gitconfig，设置自己的alias</p><p><img src="/img/article/alias.png" alt="设置自己的alias"></p><h3 id="11-git-rebase-变基"><a href="#11-git-rebase-变基" class="headerlink" title="11.git rebase 变基"></a>11.git rebase 变基</h3><p>rebase的原理是枚举变更的commit，依次变基<br>rebase就是重新排列base，而base就是指commit<br><code>git rebase 基</code>，出现冲突解决冲突后将变更add进暂存区，然后执行<code>git rebase --continue</code>继续下一个commit节点的rebase，最后查看log会发现顺序已经变12534</p><p><img src="/img/article/rebase.jpg" alt="rebase"></p><h3 id="12-git-分支命名规范"><a href="#12-git-分支命名规范" class="headerlink" title="12.git 分支命名规范"></a>12.git 分支命名规范</h3><p>git 分支分为集成分支、功能分支和修复分支，分别命名为 develop、feature 和 hotfix，均为单数，不可使用 features、future、hotfixes、hotfixs 等错误名称。</p><p>1.git主分支(master)。它是自动建立，用于发布重大版本更新</p><p>2.git开发主分支(develop)。日常开发在此分支上进行</p><p>3.git临时性分支：用于应对一些特定目的的版本开发(验证OK后，应该删除此分支)，主要有： 　</p><p>功能（feature）分支：它是为了开发某种特定功能，从Develop分支上面分出来的。开发完成后，要再并入Develop。可以采用feature-的形式命名。</p><p>预发布（release）分支：指发布正式版本之前（即合并到Master分支之前），我们可能需要有一个预发布的版本进行测试。预发布分支是从Develop分支上面分出来的，预发布结束以后，必须合并进Develop和Master分支。它的命名，可以采用release-的形式</p><p>修补bug（hotfix）分支：软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进Master和Develop分支。它的命名，可以采用hotfix-***的形式。</p><p>注意事项： 一个分支尽量开发一个功能模块，不要多个功能模块在一个分支上开发。 feature 分支在申请合并之前，最好是先 pull 一下 develop 主分支下来，看一下有没有冲突，如果有就先解决冲突后再申请合并。</p><h3 id="13-git中commit是最重要的"><a href="#13-git中commit是最重要的" class="headerlink" title="13.git中commit是最重要的"></a>13.git中commit是最重要的</h3><p>所有的概念都是围绕它展开的，比如分支是commit序列的集合载体，而在执行merge的时候也是针对一个个commit进行合并，执行reset时也是回滚至某个commit，而rebase，它的rebase指的就是commit</p><p>参考：<a href="https://www.bilibili.com/video/BV1BE411g7SV/?spm_id_from=333.999.0.0&amp;vd_source=d6fd1d657869eff32e2a7ad32e7d535d">https://www.bilibili.com/video/BV1BE411g7SV/?spm_id_from=333.999.0.0&amp;vd_source=d6fd1d657869eff32e2a7ad32e7d535d</a></p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python爬虫简单案例(Excel/Mysql两种存储方式)</title>
    <link href="/2022/07/27/demo10/"/>
    <url>/2022/07/27/demo10/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Python爬虫的经典入门案例当属爬豆瓣的电影Top250了（哈哈哈被薅秃的豆瓣）</p><p>本例用到的库有<code>BeautifulSoup</code>、<code>re</code>、<code>urllib.request,urllib.error</code>以及将数据保存到excel的<code>xlwt</code>和将数据保存到Mysql的<code>sqlite3</code>,全部操作在一个<code>.py</code>文件里完成</p><h4 id="1-导入库"><a href="#1-导入库" class="headerlink" title="1.导入库"></a>1.导入库</h4><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs capnproto"><span class="hljs-keyword">import</span> re     <span class="hljs-comment">#正则表达式，进行文字匹配</span><br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup   <span class="hljs-comment">#网页解析，获取数据</span><br><span class="hljs-keyword">import</span>  urllib.request,urllib.error  <span class="hljs-comment">#制定URL，获取网页数据</span><br><span class="hljs-keyword">import</span> xlwt   <span class="hljs-comment">#进行excel操作</span><br><span class="hljs-keyword">import</span> sqlite3      <span class="hljs-comment">#进行SQLLite操作</span><br></code></pre></td></tr></table></figure><h4 id="2-mian方法"><a href="#2-mian方法" class="headerlink" title="2.mian方法"></a>2.mian方法</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">def main<span class="hljs-literal">()</span>:<br>    baseurl=<span class="hljs-string">&quot;https://movie.douban.com/top250?start=&quot;</span><br>    #<span class="hljs-number">1.</span>爬取网页<br>    datalist=get<span class="hljs-constructor">Data(<span class="hljs-params">baseurl</span>)</span><br>    print(datalist)<br>    # <span class="hljs-number">3.</span>保存数据<br>    savepath = <span class="hljs-string">&quot;豆瓣电影Top250.xls&quot;</span><br>    save<span class="hljs-constructor">Data(<span class="hljs-params">datalist</span>,<span class="hljs-params">savepath</span>)</span><br></code></pre></td></tr></table></figure><h4 id="3-正则匹配"><a href="#3-正则匹配" class="headerlink" title="3.正则匹配"></a>3.正则匹配</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#模</span><br>findname=re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;&lt;span class=&quot;title&quot;&gt;(.*?)&lt;/span&gt;&#x27;</span>)<br>findintroduce=re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;&lt;p class=&quot;&quot;&gt;(.*?)&lt;/p&gt;&#x27;</span>,re.S)<br>findscore=re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;&lt;span&gt;(.*?)人评价&lt;/span&gt;&#x27;</span>)<br>findword=re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;&lt;span class=&quot;inq&quot;&gt;(.*)&lt;/span&gt;&#x27;</span>)<br>findimg=re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;class=&quot;&quot; src=&quot;(.*?)&quot; width=&quot;100&quot;/&#x27;</span>)<br>findmore=re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;&lt;a class=&quot;&quot; href=&quot;(.*?)&quot;&gt;&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="4-爬取网页"><a href="#4-爬取网页" class="headerlink" title="4.爬取网页"></a>4.爬取网页</h4><p>豆瓣Top250的网页是每一页25个电影，共10页<br>所以<code>mian()</code>里<code>baseurl=&quot;https://movie.douban.com/top250?start=&quot;</code>,在爬取时用<code>for i in range(0,10)</code>、<code>url=baseurl+str(i*25)</code>翻页</p><p>注：range(0,10)左开右闭</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs gradle">#<span class="hljs-number">1</span>.爬取网页<br><span class="hljs-keyword">def</span> getData(baseurl):<br>    datalist=[]<br>    <span class="hljs-keyword">for</span> i in range(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>):<br>        url=baseurl+str(i*<span class="hljs-number">25</span>)<br>        # <span class="hljs-number">1.1</span>爬取<br>        html=askUrl(url)<br>        bs=BeautifulSoup(html,<span class="hljs-string">&quot;html.parser&quot;</span>)<br>        bss=bs.find_all(<span class="hljs-string">&quot;div&quot;</span>,class_=<span class="hljs-string">&quot;item&quot;</span>)<br>        # <span class="hljs-keyword">print</span>(bss)<br>        # <span class="hljs-number">1.2</span>逐一解析数据<br>        <span class="hljs-keyword">for</span> item in bss:<br>            data=[]<br>            item=str(item)<br><br>            name=re.<span class="hljs-keyword">findall</span>(findname,item)<br>            <span class="hljs-keyword">if</span> (len(name)==<span class="hljs-number">2</span>):<br>                cname=name[<span class="hljs-number">0</span>]<br>                oname=name[<span class="hljs-number">1</span>]<br>                name=cname+oname<br>                data.<span class="hljs-keyword">append</span>(name)<br>            <span class="hljs-keyword">else</span>:<br>                data.<span class="hljs-keyword">append</span>(name)<br><br>            introduce = re.<span class="hljs-keyword">findall</span>(findintroduce, item)[<span class="hljs-number">0</span>]<br>            introduce=re.sub(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;&quot;</span>,introduce)<br>            introduce=re.sub(<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>,introduce)<br>            data.<span class="hljs-keyword">append</span>(introduce.strip())<br><br>            score=re.<span class="hljs-keyword">findall</span>(findscore,item)[<span class="hljs-number">0</span>]<br>            data.<span class="hljs-keyword">append</span>(score)<br><br>            word=re.<span class="hljs-keyword">findall</span>(findword,item)<br>            <span class="hljs-keyword">if</span> len(word)!=<span class="hljs-number">0</span>:<br>                data.<span class="hljs-keyword">append</span>(word)<br>            <span class="hljs-keyword">else</span>:<br>                data.<span class="hljs-keyword">append</span>(<span class="hljs-string">&quot;无&quot;</span>)<br><br>            img = re.<span class="hljs-keyword">findall</span>(findimg, item)[<span class="hljs-number">0</span>]<br>            data.<span class="hljs-keyword">append</span>(img)<br><br>            more=re.<span class="hljs-keyword">findall</span>(findmore,item)[<span class="hljs-number">0</span>]<br>            data.<span class="hljs-keyword">append</span>(more)<br><br>            datalist.<span class="hljs-keyword">append</span>(data)<br><br>    <span class="hljs-keyword">return</span> datalist<br><br>#<span class="hljs-number">2</span>爬取<br><span class="hljs-keyword">def</span> askUrl(url):<br>   <br>    head=&#123;<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:65.0) Gecko/20100101 Firefox/65.0&quot;</span><br><br>&#125;<br>    req=urllib.request.Request(url,headers=head)<br>    html=urllib.request.urlopen(req)<br>    <span class="hljs-keyword">return</span> html<br></code></pre></td></tr></table></figure><h4 id="5-保存数据（以下方法二选一）"><a href="#5-保存数据（以下方法二选一）" class="headerlink" title="5.保存数据（以下方法二选一）"></a>5.保存数据（以下方法二选一）</h4><h5 id="5-1-保存到excel"><a href="#5-1-保存到excel" class="headerlink" title="5.1.保存到excel"></a>5.1.保存到excel</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#3</span>.保存数据到excel<br>def saveData(datalist,savepath):<br>    addxls=xlwt.<span class="hljs-built_in">Workbook</span>(encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<br>    addsheet=addxls.<span class="hljs-built_in">add_sheet</span>(<span class="hljs-string">&#x27;sheet1&#x27;</span>)<br>    col=(<span class="hljs-string">&#x27;电影名字&#x27;</span>,<span class="hljs-string">&#x27;介绍&#x27;</span>,<span class="hljs-string">&#x27;评价人数&#x27;</span>,<span class="hljs-string">&#x27;一句话&#x27;</span>,<span class="hljs-string">&#x27;图片链接&#x27;</span>,<span class="hljs-string">&#x27;影片详情&#x27;</span>)<br>    for i in <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">6</span>):<br>        addsheet.<span class="hljs-built_in">write</span>(<span class="hljs-number">0</span>,i,col[i])<br>    for i in <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">250</span>):<br>        data=datalist[i]<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;第%d条&quot;</span>%i)<br>        for j in <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">6</span>):<br>            addsheet.<span class="hljs-built_in">write</span>(i+<span class="hljs-number">1</span>,j,data[j])<br>    addxls.<span class="hljs-built_in">save</span>(savepath)<br></code></pre></td></tr></table></figure><h5 id="5-2-保存到mysql"><a href="#5-2-保存到mysql" class="headerlink" title="5.2.保存到mysql"></a>5.2.保存到mysql</h5><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment"># 3.保存数据到mysql</span><br>def saveData(datalist):<br>    <span class="hljs-comment"># 打开数据库连接</span><br>    db = pymysql.connect(host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>                         user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>                         password=<span class="hljs-string">&#x27;#密码&#x27;</span>,<br>                         database=<span class="hljs-string">&#x27;#数据库名&#x27;</span>)<br>    <span class="hljs-comment"># 使用cursor()方法获取操作游标</span><br>    cursor = db.cursor()<br>    <span class="hljs-keyword">for</span> i in range(<span class="hljs-number">0</span>,<span class="hljs-number">250</span>):<br>        data=datalist[i]<br>        k=tuple(data)<br>        <span class="hljs-keyword">print</span>(k)<br>        <span class="hljs-comment"># SQL 插入语句</span><br>        sql = <span class="hljs-string">&quot;INSERT INTO `表名`(name,introduce,score,word,img,more)VALUES (%s,%s,%s,%s,%s,%s)&quot;</span><br>        try:<br>            <span class="hljs-comment"># 执行sql语句</span><br>            <span class="hljs-comment"># 提交到数据库执行</span><br>            cursor.execute(sql, k)<br>            db.commit()<br>        except:<br>            <span class="hljs-comment"># 如果发生错误则回滚</span><br>            db.rollback()<br>    <span class="hljs-comment"># 关闭数据库连接</span><br>    db.close()<br></code></pre></td></tr></table></figure><h4 id="6-执行当前文件"><a href="#6-执行当前文件" class="headerlink" title="6.执行当前文件"></a>6.执行当前文件</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#执行当前文件</span><br><span class="hljs-keyword">if</span> __name__ ==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;开始爬取&quot;</span>)<br>    main()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;爬取完成&quot;</span>)<br></code></pre></td></tr></table></figure><p>执行文件成功后，控制台会打印如下结果：<br><img src="/img/article/sp1.png" alt="控制台结果"></p><p>同级目录下找到excel文件：<br><img src="/img/article/sp2.png" alt="豆瓣电影Top250.xls"></p><p>mysql进入相应database，<code>select * from 表名 </code>：<br><img src="/img/article/sp3.png" alt="mysql内的存储结果"></p><p><em><strong>The End</strong></em></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Wepb图片格式无需借助工具本地转换为PNG/JPEG/GIF等</title>
    <link href="/2022/07/27/demo09/"/>
    <url>/2022/07/27/demo09/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>注：以Windows系统为例</p><h4 id="1-下载wepb文件后右键打开方式选择画图"><a href="#1-下载wepb文件后右键打开方式选择画图" class="headerlink" title="1.下载wepb文件后右键打开方式选择画图"></a>1.下载wepb文件后右键打开方式选择画图</h4><p><img src="/img/article/webp1.png" alt="右键 &gt; 打开方式 &gt; 画图"></p><h4 id="2-左上角另存为"><a href="#2-左上角另存为" class="headerlink" title="2.左上角另存为"></a>2.左上角另存为</h4><p>Windows系统自带的画图工具可以简单编辑图片，比如旋转、放大画布、加文字等等</p><p><img src="/img/article/webp2.png" alt="左上角另存为"></p><h4 id="3-保存格式"><a href="#3-保存格式" class="headerlink" title="3.保存格式"></a>3.保存格式</h4><p><img src="/img/article/webp3.png" alt="保存格式"></p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Vercel托管GitHub Pages并绑定域名</title>
    <link href="/2022/07/25/demo08/"/>
    <url>/2022/07/25/demo08/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>注：域名dns解析用的是<a href="https://cloud.tencent.com/">腾讯云平台</a></p><p>感谢<a href="https://blog.linsnow.cn/">L1nSn0w</a>和<a href="https://dusays.com/">杜老师</a>的指导和帮助！</p><h3 id="1-Vercel托管GitHub-Pages"><a href="#1-Vercel托管GitHub-Pages" class="headerlink" title="1.Vercel托管GitHub Pages"></a>1.Vercel托管GitHub Pages</h3><h5 id="1-1-注册账号"><a href="#1-1-注册账号" class="headerlink" title="1.1 注册账号"></a>1.1 注册账号</h5><p>进入 <a href="https://vercel.com/">https://vercel.com/</a> 点击Sign up注册一个账号</p><h5 id="1-2-从GitHub上拉取代码"><a href="#1-2-从GitHub上拉取代码" class="headerlink" title="1.2 从GitHub上拉取代码"></a>1.2 从GitHub上拉取代码</h5><p>点击<code>New Project</code>新建项目<br><img src="/img/article/vercel1.png" alt="New Project"></p><p>添加GitHub账户，选择仓库，点击import拉取代码<br><img src="/img/article/vercel2.png" alt="点击import拉取代码"></p><p>之后点击<code>Deploy</code>部署，成功后会有放烟花的特效，然后点击<code>Go to Bashboard</code>进入仪表盘</p><p>在仪表盘中的<code>DOMAINS</code>是Vercel给我们提供的免费二级域名</p><h3 id="2-绑定域名：腾讯云dns解析域名至Vercel提供的IP上"><a href="#2-绑定域名：腾讯云dns解析域名至Vercel提供的IP上" class="headerlink" title="2.绑定域名：腾讯云dns解析域名至Vercel提供的IP上"></a>2.绑定域名：腾讯云dns解析域名至Vercel提供的IP上</h3><h5 id="2-1-腾讯云dns解析"><a href="#2-1-腾讯云dns解析" class="headerlink" title="2.1 腾讯云dns解析"></a>2.1 腾讯云dns解析</h5><p>注：因为我的域名是在腾讯云上买的，所以直接用腾讯云解析，只作参考</p><p>进入<a href="https://cloud.tencent.com/">腾讯云平台</a>控制台，进入<code>DNS 解析 DNSPod</code> &gt; 在操作一栏选择<code>解析</code> &gt; 添加记录 &gt; 填写主机记录（域名的前缀，比如我是blog，不需要前缀直接解析主域名填@）&gt;记录值和记录类型有以下两种填法，二选一即可</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">记录类型：<span class="hljs-keyword">A</span><br>记录值：<span class="hljs-number">76.223.126.88</span><br></code></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">记录类型：<span class="hljs-keyword">CNAME</span><br>记录值：cname-china.vercel-dns.com<br></code></pre></td></tr></table></figure><h5 id="2-2-Vercel添加域名"><a href="#2-2-Vercel添加域名" class="headerlink" title="2.2 Vercel添加域名"></a>2.2 Vercel添加域名</h5><p>确认后，去到Vercel相应项目仪表盘 &gt; Settings &gt; Domains 填写你在腾讯云解析时的域名前缀+主域名，点击<code>Add</code><br><img src="/img/article/vercel3.png" alt="添加域名"></p><p>如果dns解析对的话会如下图一样全蓝成功，然后登录你的域名就可以看见网站啦<br><img src="/img/article/vercel6.png" alt="全蓝的成功"></p><p>也有可能会需要更久的时间：<br><img src="/img/article/vercel7.png"></p><h3 id="3-关于踩坑"><a href="#3-关于踩坑" class="headerlink" title="3.关于踩坑"></a>3.关于踩坑</h3><p>如果dns解析不对的话会报以下错误<br><img src="/img/article/vercel4.png" alt="建议的A值"><br><img src="/img/article/vercel5.png" alt="建议的CNAME值"></p><p>没错这就是之前要填写的A值或者CNAME值，我写这篇博文的顺序反过来了，原本应该先来查询A值的再去解析的，而且A值和CNAME值还和我提供的不一样，为什么这样，一切源于我配置完后发现<code>76.76.21.21</code>的IP指向让我的网站访问速度不减反增了…然后我疑惑地查询资料，发现了一篇大佬的文章<a href="https://hin.cool/posts/verceldown.html">《Vercel无法访问带来了哪些影响》</a>，文中提到vercel在2021年5月无法访问过，根据博主查到的vercel官网公告，vercel根据中国用户的问题提出的解决方案是：将指向vercel的A值从<code>76.76.21.21</code>更改为<code>76.223.126.88</code>，建议将CNAME值从<code>cname.vercel-dns.com</code>更改为<code>cname-china.vercel-dns.com</code><br><img src="/img/article/sy.jpg" alt="图源https://hin.cool/posts/verceldown.html"></p><p><em><strong>The End</strong></em></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>存一些以前刻的橡皮章</title>
    <link href="/2022/07/25/demo07/"/>
    <url>/2022/07/25/demo07/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>平时这些照片都是零零散散存在各个地方，既然现在开了博客，那就存在上面吧</p><p>以前玩的东西还挺杂的，又是橡皮章又是胶带拼贴，还有手编绳和水彩彩墨，还捣鼓过一阵子手账，小时候还玩过一段时间软陶，以后还想玩儿更多的东西，嘿嘿</p><p><img src="/img/article/z1.png" alt="有人看得出来这是哪吒吗"><br><img src="/img/article/z2.png" alt="阴阳师姑获鸟"><br><img src="/img/article/z3.png"><br><img src="/img/article/z4.png"></p>]]></content>
    
    
    <categories>
      
      <category>日常叨叨念</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CSS:flex布局</title>
    <link href="/2022/07/23/demo06/"/>
    <url>/2022/07/23/demo06/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ul><li><p><strong><a href="#one"> 1.flex布局原理</a></strong></p></li><li><p><strong><a href="#two"> 2.flex布局父项常见属性 </a></strong></p><ul><li><em><a href="#two">2.1 flex-direction：设置主轴方向</a></em></li><li><em><a href="#two">2.2 justify-content：设置主轴上子元素排列方式</a></em></li><li><em><a href="#two-one">2.3 align-items：设置侧轴上子元素的排列方式（单行）</a></em></li><li><em><a href="#two-one">2.4 align-content：设置侧轴上子元素的排列方式（多行）</a></em></li><li><em><a href="#two-two">2.5 flex-wrap：设置子元素是否换行</a></em></li><li><em><a href="#two-two">2.6 flex-flow：复合属性，可同时设置flex-direction和flex-wrap</a></em></li></ul></li></ul><ul><li><strong><a href="#three">3.flex布局子项常见属性</a></strong><ul><li><em><a href="#three">3.1 flex：子项分配剩余空间</a></em></li><li><em><a href="#three-one">3.2 align-self：控制单个子项自己在侧轴的排列方式</a></em></li><li><em><a href="#three-one">3.3 order：定义子项排序顺序</a></em></li></ul></li></ul><p><span id="one"></span></p><h2 id="1-flex布局原理"><a href="#1-flex布局原理" class="headerlink" title="1.flex布局原理"></a>1.flex布局原理</h2><ul><li><p>为父盒子设置<code>display：flex</code>后，<strong>子元素的float、clear和vertical-align属性失效</strong></p></li><li><p><strong>伸缩布局=弹性布局=伸缩盒布局=弹性盒布局=flex布局</strong></p></li><li><p>flex布局下，父项（flex container）为flex“容器”，子项（flex item）为flex“项目”，通过给父盒子添加flex属性来控制子项的位置和排列方式<br><img src="/img/article/flex.png" alt="row和column的方向"></p></li></ul><p><span id="two"></span></p><h2 id="2-flex布局-父项-常见属性"><a href="#2-flex布局-父项-常见属性" class="headerlink" title="2.flex布局  父项 常见属性"></a>2.flex布局  父项 常见属性</h2><h4 id="2-1-flex-direction：设置主轴方向"><a href="#2-1-flex-direction：设置主轴方向" class="headerlink" title="2.1 flex-direction：设置主轴方向"></a>2.1 flex-direction：设置主轴方向</h4><p><img src="/img/article/flex1.png" alt="flex-direction"></p><h4 id="2-2-justify-content：设置主轴上子元素排列方式"><a href="#2-2-justify-content：设置主轴上子元素排列方式" class="headerlink" title="2.2 justify-content：设置主轴上子元素排列方式"></a>2.2 justify-content：设置主轴上子元素排列方式</h4><p><img src="/img/article/flex2.png" alt="ajustify-content"><br><span id="two-one"></span></p><h4 id="2-3-align-items：设置侧轴上子元素的排列方式（单行）"><a href="#2-3-align-items：设置侧轴上子元素的排列方式（单行）" class="headerlink" title="2.3 align-items：设置侧轴上子元素的排列方式（单行）"></a>2.3 align-items：设置侧轴上子元素的排列方式（单行）</h4><p>注：设置<code>stretch</code>属性，不能设置侧轴方向的长宽</p><p>align-items仅限<code>flex-wrap: no wrap</code>的单行子项</p><p><img src="/img/article/flex3.png" alt="align-items"></p><h4 id="2-4-align-content：设置侧轴上子元素的排列方式（多行）"><a href="#2-4-align-content：设置侧轴上子元素的排列方式（多行）" class="headerlink" title="2.4 align-content：设置侧轴上子元素的排列方式（多行）"></a>2.4 align-content：设置侧轴上子元素的排列方式（多行）</h4><p><code>flex-wrap: wrap</code>多行子项</p><p><img src="/img/article/flex4.png" alt="align-content"></p><p><span id="two-two"></span></p><h4 id="2-5-flex-wrap：设置子元素是否换行"><a href="#2-5-flex-wrap：设置子元素是否换行" class="headerlink" title="2.5 flex-wrap：设置子元素是否换行"></a>2.5 flex-wrap：设置子元素是否换行</h4><p><img src="/img/article/flex5.png" alt="flex-wrap"></p><h4 id="2-6-flex-flow：复合属性，可同时设置flex-direction和flex-wrap"><a href="#2-6-flex-flow：复合属性，可同时设置flex-direction和flex-wrap" class="headerlink" title="2.6 flex-flow：复合属性，可同时设置flex-direction和flex-wrap"></a>2.6 flex-flow：复合属性，可同时设置flex-direction和flex-wrap</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">flex-flow</span>: row wrap<br></code></pre></td></tr></table></figure><p><span id="three"></span></p><h2 id="3-flex布局-子项-常见属性"><a href="#3-flex布局-子项-常见属性" class="headerlink" title="3.flex布局 子项 常见属性"></a>3.flex布局 子项 常见属性</h2><h4 id="3-1-flex：子项分配剩余空间"><a href="#3-1-flex：子项分配剩余空间" class="headerlink" title="3.1 flex：子项分配剩余空间"></a>3.1 flex：子项分配剩余空间</h4><p>用flex表示占多少<strong>份数</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">flex: &lt;<span class="hljs-built_in">number</span>&gt;;   <span class="hljs-comment">#默认是0</span><br></code></pre></td></tr></table></figure><p>如果子项前后都是定宽块元素，设置<code>flex: 1</code>则独占剩余空间</p><p>例：用flex表示1比2比1（1：2：1）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#CSS</span><br> <span class="hljs-selector-tag">div</span> &#123;<br>      <span class="hljs-attribute">display</span>: flex;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>  &#125;<br>  <span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">1</span>),<br>  <span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>) &#123;<br>      <span class="hljs-attribute">background-color</span>: cadetblue;<br>      <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) &#123;<br>      <span class="hljs-attribute">background-color</span>: brown;<br>      <span class="hljs-attribute">flex</span>: <span class="hljs-number">2</span>;<br>  &#125;<br><span class="hljs-selector-id">#HTML</span><br> &lt;<span class="hljs-selector-tag">div</span>&gt;<br>      &lt;<span class="hljs-selector-tag">span</span>&gt;<span class="hljs-number">1</span>&lt;/<span class="hljs-selector-tag">span</span>&gt;<br>      &lt;<span class="hljs-selector-tag">span</span>&gt;<span class="hljs-number">2</span>&lt;/<span class="hljs-selector-tag">span</span>&gt;<br>      &lt;<span class="hljs-selector-tag">span</span>&gt;<span class="hljs-number">1</span>&lt;/<span class="hljs-selector-tag">span</span>&gt;<br>  &lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></td></tr></table></figure><p><span id="three-one"></span></p><p><img src="/img/article/flex6.png" alt="1:2:1"></p><h4 id="3-2-align-self：控制单个子项自己在侧轴的排列方式"><a href="#3-2-align-self：控制单个子项自己在侧轴的排列方式" class="headerlink" title="3.2 align-self：控制单个子项自己在侧轴的排列方式"></a>3.2 align-self：控制单个子项自己在侧轴的排列方式</h4><p>align-self属性允许单个子项和其他子项有不一样的对齐方式，可覆盖align-items属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>)&#123;<br>  <span class="hljs-comment">/*设置自己在侧轴的排列方式*/</span><br>  <span class="hljs-attribute">align-self</span>:flex-end<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-order：定义子项排序顺序"><a href="#3-3-order：定义子项排序顺序" class="headerlink" title="3.3 order：定义子项排序顺序"></a>3.3 order：定义子项排序顺序</h4><p>数值越小，排列越靠前（是水平或者垂直方向，不是层叠），默认为0<br>注：和z-index（层叠）不一样</p><p>资料参考：PINK老师</p>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>记录一张迟迟没有完成的画</title>
    <link href="/2022/07/15/demo05/"/>
    <url>/2022/07/15/demo05/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>原想把色彩知识学完再完全细化上色的，但是还是因为各种各样的事情给搁置了，背景也不知道该怎么画，或许这张画将拖几年才能完成…至少在我学完色彩之后才能继续动笔，先放上来记录一下吧，记录当时看《犬夜叉》的快乐，这部二十多年前的动漫真的是经久不衰，除了经常重复的打怪场面和让人心塞的三角恋，其他项在我心里真的很完美，人物的个性刻画的很棒，角色各自的成长是真的在每一集的时光里有所体现，犬夜叉和戈薇的发糖时间真的甜到让人姨母笑得合不拢嘴</p><p>在这存一个拥有超全动漫资源的网址 <strong><a href="https://www.yhdmp.cc/">【樱花动漫】</a></strong> ,这上面基本没有找不到的动漫，犬夜叉全集+所有番外我基本都在上面追完了</p><p>顺便期待一下今年下半年和明年上半年的动漫，《鬼灭之刃第三季锻刀村篇》和《致不灭的你第二季》很快就要到了，还有《咒术回战第二季》，他们预计的上线时间都挤到一块了，这将是快乐加倍的日子哈哈哈哈哈</p><p><img src="/img/qycall.png" alt="犬夜叉"></p>]]></content>
    
    
    <categories>
      
      <category>日常叨叨念</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Fluid主题下Pjax实现Aplayer音乐播放器全局不中断</title>
    <link href="/2022/07/14/demo04/"/>
    <url>/2022/07/14/demo04/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><br>千般荒凉，以此为梦。万里蹀躞，以此为！ ——余秋雨《文化苦旅》<br><br></p></blockquote><p>注：如果要在Fluid主题下实现Pjax，需要牺牲很多小功能，最后权衡再三还是关掉了</p><p>用Pjax实现Aplayer音乐播放器全局不中断的过程其实不太顺利，因为我用的主题没有像nexT一样内嵌Pjax功能，网上很多基于nexT的教程直接是npm个库然后在配置文件里<code>enable:true</code>一下就成功了，而我们用其他主题的选手需要从头配置到尾，其实从头配置倒不算难点，难的是因为主题的不同导致配置Pjax的时候出现的Bug也不同，需要自己一个个调试，而找不到参考资料这未知的Bug确实很让人抓狂，不过好在最后是解决了</p><p>接下来我将介绍在<a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid</a>主题下怎么配置Pjax实现Aplayer音乐播放器全局不中断,并附上各种踩坑的经历</p><h2 id="1-引入Pjax"><a href="#1-引入Pjax" class="headerlink" title="1. 引入Pjax"></a>1. 引入Pjax</h2><p>先上<a href="https://github.com/defunkt/jquery-pjax">Pjax</a>文档</p><blockquote><p>pjax = pushState + ajax<br>pjax is a jQuery plugin that uses ajax and pushState to deliver a fast browsing experience with real permalinks, page titles, and a working back button.<br>pjax works by fetching HTML from your server via ajax and replacing the content of a container element on your page with the loaded HTML. It then updates the current URL in the browser using pushState. This results in faster page navigation for two reasons:<br>-No page resources (JS, CSS) get re-executed or re-applied;<br>-If the server is configured for pjax, it can render only partial page contents and thus avoid the potentially costly full layout render.</p></blockquote><p>作者说：<strong>pjax = pushState + ajax</strong> ,即pjax是由可以 <strong>异步刷新页面的<code>ajax</code></strong> 和 <strong>弥补ajax导致url不变无法回退页面的<code>pushState</code></strong> 组成的</p><p>和配置Aplayer一样，我依旧引用了镜像源的js文件（懒该打），将以下代码放在主题文件夹下<code>layout/layout.ejs</code>文件里<code>&lt;/body&gt;</code>的前面：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/jquery.pjax/2.0.1/jquery.pjax.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 对所有链接跳转事件绑定pjax容器pjax-container </span></span><br><span class="language-javascript">  $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">pjax</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;#pjax-container&#x27;</span>, &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">fragment</span>:<span class="hljs-string">&#x27;#pjax-container&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">timeout</span>:<span class="hljs-number">8000</span></span><br><span class="language-javascript">    &#125;);   </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br></code></pre></td></tr></table></figure><p>踩坑点1：之前代码放在<code>&lt;header&gt;</code>标签里的时候，chrome的控制台总是报$(…).pjax is not a function，查找资料<a href="https://blog.csdn.net/weixin_37935725/article/details/108599731">$(…).XXX is not a function的解决办法</a>后把代码放在<code>&lt;/body&gt;</code>前报错便成功消失 </p><h2 id="2-使用Pjax"><a href="#2-使用Pjax" class="headerlink" title="2. 使用Pjax"></a>2. 使用Pjax</h2><p>在主题文件夹下<code>layout/layout.ejs</code>文件里需要用pjax的地方套上id为<code>pjax-container</code>的div：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;pjax-container&quot;</span>&gt;<br>    ...<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><p>在需要异步加载资源的部分套上<code>&lt;div id=&quot;pjax-container&quot;&gt;&lt;/div&gt;</code>后整个pjax配置其实已经基本完成了，再往后就是各种不同主题的选手需要解决不同Bug的时间了</p><p><span id="three"></span></p><h2 id="3-踩坑记录"><a href="#3-踩坑记录" class="headerlink" title="3. 踩坑记录"></a>3. 踩坑记录</h2><p>在以上步骤配置完后，我的全站页面跳转不中断音乐基本实现了，但零星有几个Bug需要解决：</p><p><span id="bug1"></span></p><h4 id="Bug1：文章封面-内容里的图片-和-头像的图片-加载不出来"><a href="#Bug1：文章封面-内容里的图片-和-头像的图片-加载不出来" class="headerlink" title="Bug1：文章封面/内容里的图片 和 头像的图片 加载不出来"></a>Bug1：文章封面/内容里的图片 和 头像的图片 加载不出来</h4><p>文章封面和内容里的图片以及头像的图片都加载不出来，我一开始以为是主题配置里的这部分资源不支持ajax请求，在<a href="https://github.com/defunkt/jquery-pjax">pjax</a>作者文档里<code>$(document).pjax(&#39;a&#39;, &#39;#pjax-container&#39;)</code>的用法是这样写的：</p><blockquote><p>The simplest and most common use of pjax looks like this:<br><code>$(document).pjax(&#39;a&#39;, &#39;#pjax-container&#39;)</code><br>This will enable pjax on all links on the page and designate the container as #pjax-container.<br>If you are migrating an existing site, you probably don’t want to enable pjax everywhere just yet. Instead of using a global selector like <code>a</code>, try annotating pjaxable links with <code>data-pjax</code>, then use <code>&#39;a[data-pjax]&#39;</code> as your selector. Or, try this selector that matches any <code>&lt;a data-pjax href=&gt;</code> links inside a <code>&lt;div data-pjax&gt;</code> container:<br><code>$(document).pjax(&#39;[data-pjax] a, a[data-pjax]&#39;, &#39;#pjax-container&#39;)</code></p></blockquote><p>即对于页面中所有id为pjax-container的a标签开启pjax，如果有些链接不想开启pjax，可以将函数改为<code>$(document).pjax(&#39;[data-pjax] a, a[data-pjax]&#39;, &#39;#pjax-container&#39;)</code>，用带有<code>data-pjax</code>属性选择器的a标签代替全局a标签，并将想启用pjax的a标签加上<code>data-pjax</code>属性即这样：<code>&lt;a data-pjax href=&gt;</code>，然后还需将<code>&lt;a data-pjax href=&gt;</code>此标签嵌套在一个带有<code>data-pjax</code>属性的div标签即<code>&lt;div data-pjax&gt;</code> 里,这样的话不想用pjax的a标签不加<code>data-pjax</code>属性就行</p><p>网络上还有人写了另一种单独a标签不开启pjax的方法，详见<a href="https://www.h5w3.com/232186.html">使用 jQuery Pjax 做全站异步加载遇到的坑</a>，他是将<code>$(document).pjax(&#39;a&#39;, &#39;#pjax-container&#39;)</code>改为<code>$(document).pjax(&#39;a[pjax!=&quot;exclude&quot;]&#39;, &#39;#pjax-container&#39;)</code>，再在不开pjax的a标签内加上<code>pjax=&quot;exclude&quot;</code></p><p>当我尝试后发现…主题配置用的ejs模板引擎的写法我看不太懂，整个页面在哪引入图片资源这些具体的东西已经被抽象的七七八八了，然后我也不了解layout文件夹下所有ejs文件之间的关系（如果懂得话估计都是可以自己做主题出来的大佬了吧），然后在我不停将以上找到的方法在各个地方试过一遍无果后，差点就放弃配置pjax了。本来这篇文章就是想记录我当时配置pjax失败的经历，然后打算结尾写个“配置失败，在此记录只当作埋坑”（挽尊现场/逃/），但是吧…写的过程中突然又不甘心地跑去继续试</p><p>终于！我才发现…这些图片都是有懒加载的，遂跑去主题配置文件里把lazyload关掉了，然后终于成功实现全站pjax了！</p><p>而且因为开了pjax，文章第二次点击时，每篇文章的侧边栏导航和标题也消失了（啊…这难道就是鱼和熊掌不能兼得吗）</p><h4 id="Bu2：因pjax失效的js"><a href="#Bu2：因pjax失效的js" class="headerlink" title="Bu2：因pjax失效的js"></a>Bu2：因pjax失效的js</h4><p>比如我之前引入的外部js如鼠标点击特效都是放在<code>&lt;header&gt;</code>标签里的，被pjax容器包裹住导致失效了，只需把引入的外部js移出pjax容器就行，比如将其放在<code>&lt;footer&gt;</code>标签里或者直接放在<code>&lt;/body&gt;</code>结束标签前</p><p>如果是在异步刷新的页面里有不想要异步刷新的功能块，没办法分出来，那可以参考我<a href="#bug1">Bug1</a>里找到的方法，如作者文档里的<code>$(document).pjax(&#39;[data-pjax] a, a[data-pjax]&#39;, &#39;#pjax-container&#39;)</code>，网上大佬的<code>$(document).pjax(&#39;a[pjax!=&quot;exclude&quot;]&#39;, &#39;#pjax-container&#39;)</code>，或者用一个处理js因pjax失效的函数：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">//用一个回调函数处理因为pjax失效的js</span></span></span><br><span class="language-javascript"><span class="language-xml">  $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;pjax:complete&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span></span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">  &#125;</span><span class="language-xml">)</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>注：最后找到主题作者的<a href="https://github.com/fluid-dev/hexo-theme-fluid/issues/189">Issues</a>,发现作者也还没解决：<br><img src="/img/article/is.png" alt="作者Issues回复"><br>同时还有人发现有个<a href="https://jin-yuhan.github.io/">大佬stalo</a> 搞定了，结果这位大佬是用Typescript重写了Fluid主题的所有JS代码，好吧这不是我等菜鸟能搞定的，我觉得先躺平不用Pjax了…</p><p><em><strong>The End</strong></em></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>APlayer配置全站音乐播放器</title>
    <link href="/2022/07/13/demo03/"/>
    <url>/2022/07/13/demo03/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><br>是笔在绝望中开花<br>是花反抗着必然的旅程<br>是爱的光线醒来<br>照亮零度以上的风景<br><br><br>——北岛《零度以上的风景》</p></blockquote><br><h3 id="1-引入APlayer"><a href="#1-引入APlayer" class="headerlink" title="1. 引入APlayer"></a>1. 引入APlayer</h3><p>打开主题文件夹下的<code>layout/layout.ejs</code>,不同主题用的模板引擎不一样，有些是swig后缀名有些是pug后缀名，swig后缀的和ejs一样的操作，pug后缀的可以借助转换器（<a href="http://html2jade.org/">转换器戳这里</a>）转成相应格式</p><p>首先在<code>&lt;header&gt;</code>部分插入下列代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- require APlayer --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- require MetingJS --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接着找到<code>&lt;footer&gt;</code>部分插入以下代码：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;meting-js<br>server<span class="hljs-operator">=</span><span class="hljs-string">&quot;netease&quot;</span><br>type<span class="hljs-operator">=</span><span class="hljs-string">&quot;song&quot;</span><br>id<span class="hljs-operator">=</span><span class="hljs-string">&quot;417798678&quot;</span>&gt;<br>&lt;/meting-js&gt;<br><br></code></pre></td></tr></table></figure><p><code>hexo s</code>预览一下，一个播放器就出现在你的博客啦，想要更多个性化设置请继续往下阅读</p><hr><h3 id="2-修改APlayer参数"><a href="#2-修改APlayer参数" class="headerlink" title="2. 修改APlayer参数"></a>2. 修改APlayer参数</h3><p><code>&lt;meting-js&gt;</code>中的参数是可调的，根据文档<a href="https://github.com/metowolf/MetingJS">APlayer</a>中的表格：  </p><p><img src="/img/article/aplayer.png" alt="参数表格">  </p><p>必须设置的参数是<code>id</code>,<code>server</code>,<code>type</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;meting-js<br>server=<span class="hljs-string">&quot;netease&quot;</span> <span class="hljs-comment">#选择播放器：netease网易 Tencent腾讯 kugou酷狗 baidu百度</span><br><span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;song&quot;</span> <span class="hljs-comment">#song歌曲 playlist歌单</span><br><span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;60198&quot;</span> <span class="hljs-comment">#歌曲编号   </span><br>    &gt;<br>&lt;/meting-js&gt;<br><br></code></pre></td></tr></table></figure><p>歌曲编号我以网易云音乐举例，在网页中打开网易云音乐，可以不用登录，搜索一首你喜欢的歌曲（切记是非vip曲目），选择<code>生成外链播放器</code>：<br><img src="/img/article/aplayer2.png" alt="生成外链播放器">  </p><p>复制id里的值替换<code>&lt;meting-js&gt;</code>的id值<br><img src="/img/article/aplayer3.png" alt="复制id里的值"> </p><p>这样一个装有你喜欢音乐的播放器就完成啦~</p><hr><p>其他更多的美化设置指引：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;meting-js<br>  server=<span class="hljs-string">&quot;netease&quot;</span><br>  <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;song&quot;</span><br>  <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;417798678&quot;</span><br>  mini=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-comment">#是否变成迷你模式</span><br>  autoplay=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-comment">#是否自动播放</span><br>  fixed=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-comment">#是否固定在视口</span><br>  volume=<span class="hljs-string">&quot;0.7&quot;</span> <span class="hljs-comment">#音量调节</span><br>  &gt;<br>  &lt;/meting-js&gt;<br></code></pre></td></tr></table></figure><p>以上介绍了我的常用设置，还需要更多的个性化设置可以参考作者文档<a href="https://github.com/metowolf/MetingJS">APlayer</a></p><p><em><strong>The End</strong></em></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo的主题配置</title>
    <link href="/2022/07/13/demo02/"/>
    <url>/2022/07/13/demo02/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><br>“春天是走过冬天的繁荣”  ——  贾平凹<br><br>  </p></blockquote><br><h3 id="1-挑选主题"><a href="#1-挑选主题" class="headerlink" title="1. 挑选主题"></a>1. 挑选主题</h3><p>  点击 <a href="https://hexo.io/themes/">Hexo主题</a> 进入挑选，目前官网挂有367个主题。如果后续想DIY给博客增加很多自定义功能就选nexT，后面查资料会发现网上大部分主题配置解决文章都是关于nexT的…</p><h3 id="2-下载主题"><a href="#2-下载主题" class="headerlink" title="2. 下载主题"></a>2. 下载主题</h3><p>   在<a href="https://hexo.io/themes/">Hexo主题</a>页面选好心仪主题后，点击进入作者的GitHub页面，往下滑动一般都带有作者写的下载指引,此时在Hexo根目录下进入<code>themes</code>文件夹，右键<code>git bash here</code>打开git shell窗口，输入下载命令行。</p><p>   下载的命令一般有以下两种命令方式，根据主题作者的文档自行调整：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">[主题GitHub</span>地址]<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">npm</span> install<span class="hljs-meta"> [主题库名]</span><br></code></pre></td></tr></table></figure><p><strong>另：有的主题个别版本需要下载压缩包使用</strong></p><p>无论是上面三种下载方法中的哪一种，主题包都要放在<code>themes</code>文件夹下  </p><h3 id="3-配置主题"><a href="#3-配置主题" class="headerlink" title="3. 配置主题"></a>3. 配置主题</h3><p>在Hexo根目录找到站点配置文件<code>_config.yml</code>，打开修改主题：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean"># Extensions<br>## Plugins: https:<span class="hljs-comment">//hexo.io/plugins/</span><br>## Themes: https:<span class="hljs-comment">//hexo.io/themes/</span><br>theme: [你的主题名称]  #和themes文件夹下的主题文件夹同名<br></code></pre></td></tr></table></figure><p>另：主题文件夹内也有自己的<code>_config.yml</code>配置文件，和<strong>站点配置文件</strong>不同，这个是主题自己的<strong>主题配置文件</strong>，在作者的GitHub的主题介绍中都会附带自己的主题文档，后续根据文档自行配置即可  </p><h3 id="4-上线博客"><a href="#4-上线博客" class="headerlink" title="4. 上线博客"></a>4. 上线博客</h3><p>在配置好以上步骤后，可以先在本地预览，在根目录右键<code>git bush here</code>打开git shell窗口，输入：  </p><pre><code class="hljs">hexo clean  #清理缓存hexo g  #部署hexo s  #预览 </code></pre><p>打开浏览器在地址栏输入<code>localhost:4000</code>进行效果预览,如效果无误，即可部署上线：</p><pre><code class="hljs">hexo g  #部署hexo s  #上线</code></pre><p>至此，一个穿着心仪主题的博客就上线成功啦~</p><p><em><strong>The End</strong></em></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>GitHub+Hexo搭建个人博客</title>
    <link href="/2022/07/11/demo01/"/>
    <url>/2022/07/11/demo01/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><br>我们趋行在人生这个亘古的旅途，在坎坷中奔跑，在挫折里涅槃，忧愁缠满全身，痛苦飘洒一地。我们累，却无从止歇；我们苦，却无法回避。——马尔克斯《百年孤独》<br><br>  </p></blockquote><br><p>这篇博文是我根据网上教程和个人踩坑经验总结的GitHub+Hexo搭建个人博客的(伪)教程，跟着以下目录的步骤，可以初步上线自己的Hexo博客雏形 目录第八条有记录曾经的踩坑问题，如果中途有报错卡住了可以去瞧一瞧~  </p><p>后续想了解Hexo主题配置请点击这里<a href="/2022/07/13/demo02/">《Hexo主题配置教程》</a></p><hr><p><em><strong>目录:</strong></em>  </p><p>  <strong><a href="#one">1. GitHub创建个人仓库</a></strong><br>  <strong><a href="#two">2. 安装git</a></strong><br>  <strong><a href="#three">3. 安装Node.js</a></strong><br>  <strong><a href="#four">4. 安装Hexo</a></strong><br>  <strong><a href="#add">5. 配置token(令牌)或SSH密钥</a></strong><br>  <strong><a href="#five">6. 修改站点配置文件</a></strong><br>  <strong><a href="#six">7. 部署上线</a></strong><br>  <strong><a href="#seven">8. 踩坑记录</a></strong></p><p><span id="one"><span></p><hr><h2 id="1-GitHub创建个人仓库"><a href="#1-GitHub创建个人仓库" class="headerlink" title="1. GitHub创建个人仓库"></a>1. GitHub创建个人仓库</h2><p>如果没有GitHub先注册一个人账号 <a href="https://github.com/">https://github.com/</a>  </p><p>登录GitHub，创建一个名为<code>[账号名].gihub.io</code>的仓库  </p><p><img src="/img/article/cp.png" alt="[账号名]要与GitHub账号名一致">  </p><p>[账号名]要与GitHub账号名一致,新手为避免不必要的麻烦，不要勾选Add a README file（否则可能会出现push第一次代码的时候发现push不上去），直接creating repository创建仓库   </p><p><span id="two"><span></p><hr><h2 id="2-安装git"><a href="#2-安装git" class="headerlink" title="2. 安装git"></a>2. 安装git</h2><p>在官网下载git <a href="https://git-scm.com/">https://git-scm.com/</a>  ，根据 <a href="https://blog.csdn.net/weixin_44486583/article/details/122704375">git安装教程</a> 步骤下载   </p><p><span id="three"><span></p><hr><h2 id="3-安装Node-js"><a href="#3-安装Node-js" class="headerlink" title="3. 安装Node.js"></a>3. 安装Node.js</h2><p>在官网下载node.js <a href="https://nodejs.org/en/">https://nodejs.org/en/</a>  ，根据 <a href="https://blog.csdn.net/qq_48485223/article/details/122709354">node.js安装教程</a> 步骤下载，安装完成后通过右键git bash here打开git的shell窗口，运行<code>node -v</code> 和 <code>npm -v</code> ，如果能成功出现x.x.x的版本号即安装成功   </p><p><span id="four"><span></p><hr><h2 id="4-安装Hexo"><a href="#4-安装Hexo" class="headerlink" title="4. 安装Hexo"></a>4. 安装Hexo</h2><p>先创建一个自命名空文件夹，Hexo和今后发布的网页都将存在这里，创建好之后进入文件夹中，右键git bash here打开git的shell窗口，安装hexo，输入：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><p>安装拓展：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i hexo-deployer-git<br></code></pre></td></tr></table></figure><p>初始化博客，输入：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span> blog<br></code></pre></td></tr></table></figure><p>安装完成后，点进和<code>_config.yml</code>文件同级的目录，右键git bash here打开git的shell窗口，为检测网站，创建一个页面并预览，按顺序输入以下三条命令：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">test_page</span> <br>hexo g  <br>hexo s <span class="hljs-meta">#预览</span><br></code></pre></td></tr></table></figure><p>完成后在浏览器可以预览，在地址栏输入:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">localhost</span>:<span class="hljs-number">4000</span><br></code></pre></td></tr></table></figure><p>检查页面是否成功加载，新手在这个地方可能遇见404也可能在命令阶段会有很多git上的报错，还需按照实际情况查资料解决，我会在结尾处po上自己的<a href="#seven">8.踩坑记录</a>仅供参考（真的巨多细碎的小坑…）  </p><p><span id="add"><span></p><hr><h2 id="5-配置token-令牌-或SSH密钥"><a href="#5-配置token-令牌-或SSH密钥" class="headerlink" title="5. 配置token(令牌)或SSH密钥"></a>5. 配置token(令牌)或SSH密钥</h2><p>由于2021年8月13日起GitHub不再支持账号密码身份验证，需要token(令牌)或SSH密钥进行身份验证，所以很多2021年8月之前的教程在站点配置文件<code>_config.yml</code>下<code>Deployment</code>部分的repo内容填的都还是<code>https://github.com/[账户名]/[账户名].github.io.git</code>，导致后面<code>hexo d</code>上线时输入账号密码仍旧报错，因为搞起来比较复杂，所以这个我把这个巨坑从原先的<a href="#seven">8.踩坑记录</a>挪到前面变成目录</p><h4 id="方法一：配置token-令牌"><a href="#方法一：配置token-令牌" class="headerlink" title="方法一：配置token(令牌)"></a>方法一：配置token(令牌)</h4><blockquote><p>没配置时报错含 <code>remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.</code>  </p></blockquote><p>解决方法：点击右上角头像 &gt; <strong>Settings</strong> &gt; <strong>左侧Developer settings</strong> &gt; <strong>左侧Personal access tokens</strong>，<strong>右侧点击Generate new token按钮</strong>创建令牌，进去后<code>Note</code>设置令牌名称,<code>Expiration</code>设置令牌到期时间,<code>Eelect scopes</code>选repo就行，然后拉到最下面生成，复制生成的密钥存下来（密钥只会显示这一次，切记存好）,打开站点配置文件<code>_config.yml</code>,找到以下代码修改repo：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dts"><br><span class="hljs-meta"># Deployment</span><br><span class="hljs-meta">## Docs: https:<span class="hljs-comment">//hexo.io/docs/one-command-deployment</span></span><br><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> https:<span class="hljs-comment">//[密钥]@github.com/[账号名]/[账号名].github.io.git #账户名是GitHub账号名</span><br><span class="hljs-symbol">  branch:</span> main  <span class="hljs-meta">#GitHub已将分支由master改为main</span><br></code></pre></td></tr></table></figure><h4 id="方法二：配置SSH密钥"><a href="#方法二：配置SSH密钥" class="headerlink" title="方法二：配置SSH密钥"></a>方法二：配置SSH密钥</h4><blockquote><p>没配置时报错含<code>FATAL bash: /dev/tty: No such device or address error: failed to execute prompt script (exit code 1) fatal: could not read Username for &#39;https://github.com&#39;: Invalid argument Error: bash: /dev/tty: No such device or address error: failed to execute prompt script (exit code 1) fatal: could not read Username for &#39;https://github.com&#39;: Invalid argument</code></p></blockquote><p>先在本地生成ssh key，在git shell窗口输入：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>ssh-keygen -t rsa -C [你的邮箱地址]<br></code></pre></td></tr></table></figure><p>然后一直按回车</p><p>完成后公钥就生成在<code>C:\Users\[Administrator]\.ssh\id_rsa</code>文件里，然后复制里面所有内容后进入GitHub，右上角头像 &gt; <strong>Setting</strong> &gt; <strong>左侧SSH and GPG keys</strong> &gt; 点击<strong>右侧New SSH Key按钮</strong>，进入后<code>title</code>随便设置名字，Key输入刚刚在<code>id_rsa</code>粘贴的内容，然后点击Add SSH Key按钮   </p><p>完成后去shell窗口验证ssh key:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.com<br></code></pre></td></tr></table></figure><p>出现以下语句说明ssh key已经配置好</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">Hi wispyoureyes! You<span class="hljs-symbol">&#x27;ve</span> successfully authenticated, but GitHub does <span class="hljs-keyword">not</span> provide shell <span class="hljs-keyword">access</span>.<br></code></pre></td></tr></table></figure><p>接着初始化本地git仓库，在站点配置文件<code>_config.yml</code>同级目录打开git shell窗口，设置git的username和email：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span>  <span class="hljs-string">&#x27;[你的username]&#x27;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&#x27;[你的email]&#x27;</span><br></code></pre></td></tr></table></figure><p>初始化git仓库：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><p>本地仓库连接远程仓库：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git remote add origin git@github<span class="hljs-selector-class">.com</span>:<span class="hljs-selector-attr">[账号名]</span>/<span class="hljs-selector-attr">[账号名]</span><span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.io</span>.git<br></code></pre></td></tr></table></figure><p>完成后，打开站点配置文件<code>_config.yml</code>,找到以下代码修改repo：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Deployment</span><br><span class="hljs-meta">## Docs: https:<span class="hljs-comment">//hexo.io/docs/one-command-deployment</span></span><br><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> git@github.com:[账号名]/[账号名].github.io.git <span class="hljs-meta">#账号名是GitHub账号名</span><br><span class="hljs-symbol">  branch:</span> main  <span class="hljs-meta">#GitHub已将分支由master改为main</span><br></code></pre></td></tr></table></figure><p><span id="five"><span></p><hr><h2 id="6-修改站点配置文件"><a href="#6-修改站点配置文件" class="headerlink" title="6. 修改站点配置文件"></a>6. 修改站点配置文件</h2><p>站点配置文件即<code>_config.yml</code>，点开后从上到下依次是<code>Site</code>, <code>URL</code>,<code>Directory</code>,<code>Writing</code>,<code>Home page setting</code>,<code>Category &amp; Tag</code>,<code>Metadata elements</code>,<code>Date / Time format</code>,<code>Pagination</code>,<code>Include / Exclude file(s)</code>,<code>Extensions</code>,<code>Deployment</code>,新手只需先修改一些基础的配置，让我们能先把博客发布出去   </p><p>首先<code>Site</code>部分：</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-comment"># Site</span><br><span class="hljs-attribute">title</span>:  <span class="hljs-comment">#网站主标题，一般写博客名</span><br><span class="hljs-attribute">subtitle</span>: &#x27;&#x27;  网站副标题，一般写座右铭<br><span class="hljs-attribute">description</span>:  <span class="hljs-comment">#描述</span><br><span class="hljs-attribute">keywords</span>: <br><span class="hljs-attribute">author</span>:   <span class="hljs-comment">#作者名</span><br><span class="hljs-attribute">language</span>:   <span class="hljs-comment">#网站语言，中文zh-CN，英文en</span><br><span class="hljs-attribute">timezone</span>: &#x27;&#x27;  <span class="hljs-comment">#时区不用填</span><br></code></pre></td></tr></table></figure><p><code>URL</code>部分：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><br># URL<br>url: <span class="hljs-link">https://</span>[<span class="hljs-string">账户名</span>].github.io/  <br><br></code></pre></td></tr></table></figure><p><code>Deployment</code>部分:  </p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dts"><br><span class="hljs-meta"># Deployment</span><br><span class="hljs-meta">## Docs: https:<span class="hljs-comment">//hexo.io/docs/one-command-deployment</span></span><br><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> [在目录 <span class="hljs-punctuation">&#123;</span><span class="hljs-number">5.</span>配置token(令牌)或SSH密钥<span class="hljs-punctuation">&#125;</span>处 两个方法二选一配置]<br><span class="hljs-symbol">  branch:</span> main  <span class="hljs-meta">#GitHub已将分支由master改为main</span><br></code></pre></td></tr></table></figure><p><span id="six"><span></p><hr><h2 id="7-部署上线"><a href="#7-部署上线" class="headerlink" title="7. 部署上线"></a>7. 部署上线</h2><p>依旧进入 <code>_config.yml</code>文件同级目录，右键git bash here打开git的shell窗口，按顺序输入以下代码部署上线：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> clean  <span class="hljs-comment">#清理缓存</span><br>hexo g  <span class="hljs-comment">#部署</span><br>hexo d  <span class="hljs-comment">#上线</span><br></code></pre></td></tr></table></figure><p>当<code>hexo d</code> 100%完成上线后，在浏览器地址栏输入<code>https://[账户名].github.io</code> 回车，在之前步骤没问题的情况下，<strong>至此，一个原始且淳朴的属于自己的hexo个人博客就建好啦！</strong> </p><p>想必初始的博客样式并不能满足大家想要的效果（我真的没有针对landscape →v→）,想要自己的博客有更好看的主题，可以来这挑选 <a href="https://hexo.io/themes/">Hexo主题</a> ，新手大部分会先尝试nexT，因为这个主题用的人多网上教程也多，想了解主题配置请点击这里<a href="/2022/07/13/demo02/">《Hexo主题配置教程》</a></p><p><span id="seven"><span></p><hr><h2 id="8-踩坑记录"><a href="#8-踩坑记录" class="headerlink" title="8. 踩坑记录"></a>8. 踩坑记录</h2><p class="note note-secondary">部署上线后白屏或者404</p>  <ol><li>白屏情况可能是站点配置文件<code>_config.yml</code>里的<code>URL</code>部分写错了:  <pre><code class="hljs"># URLurl: https://[账号名].github.io/  #此处的连接后记得有一条&#39;/&#39; </code></pre></li></ol><p><strong>记得配置文件里的 <code>key：value</code> 中冒号：后面都有一个空格！</strong>  </p><ol><li><p>页面404部分：<br>一般都是网址写错了，或者是站点配置文件里<code>URL</code> 下的<code>root:</code>不是’/‘，但初始配置应该不会改的，所以认准<code>https://[账号名].github.io/</code>  </p><hr></li></ol><p class="note note-secondary">`hexo d`后出现有关SSL的报错，或者报错含有`Spawn failed`</p><p>运行<code>git config --global http.sslVerify false</code> 再 <code>hexo d</code> 一遍 </p><hr><p class="note note-secondary">`hexo d`后卡一会然后出现有关time out的报错  </p><p>网络超时，等网速可以的时候再传 </p><p><em><strong>The End</strong></em></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/07/11/hello-world/"/>
    <url>/2022/07/11/hello-world/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
